// RobotBuilder Version: 4.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: Subsystem.

package frc.robot.subsystems;

import frc.robot.Constants;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj2.command.SubsystemBase;
import static edu.wpi.first.wpilibj.DoubleSolenoid.Value.*;
import edu.wpi.first.wpilibj.Joystick;
import com.ctre.phoenix.motorcontrol.can.WPI_TalonFX;
import edu.wpi.first.wpilibj.DoubleSolenoid;
import edu.wpi.first.wpilibj.PneumaticsModuleType;

import com.ctre.phoenix.motorcontrol.TalonFXControlMode;
import com.ctre.phoenix.motorcontrol.TalonFXFeedbackDevice;
import frc.robot.subsystems.climber;
public class climber extends SubsystemBase {
    //  ID=CONSTANTS


    // ID=DECLARATIONS
private WPI_TalonFX climberLeft;
private WPI_TalonFX climberRight;
private DoubleSolenoid armRelease;

Joystick _joy = new Joystick(0);  

StringBuilder _sb = new StringBuilder();

int _loops = 0;

public climber() {
        // ID=CONSTRUCTORS
climberLeft = new WPI_TalonFX(18);
climberRight = new WPI_TalonFX(17);
 
 

armRelease = new DoubleSolenoid(0, PneumaticsModuleType.CTREPCM, 4, 5);
 addChild("armRelease", armRelease);
 
climberRight.configFactoryDefault();

climberRight.configNeutralDeadband(0.001);

climberRight.configSelectedFeedbackSensor(TalonFXFeedbackDevice.IntegratedSensor,
    Constants.kPIDLoopIdx,
    Constants.kTimeoutMs);
        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    
/* Config the peak and nominal outputs */
climberRight.configNominalOutputForward(0, Constants.kTimeoutMs);
climberRight.configNominalOutputReverse(0, Constants.kTimeoutMs);
climberRight.configPeakOutputForward(1, Constants.kTimeoutMs);
climberRight.configPeakOutputReverse(-1, Constants.kTimeoutMs);

/* Config the Velocity closed loop gains in slot0 */
climberRight.config_kF(Constants.kPIDLoopIdx, Constants.kGains_Velocit.kF, Constants.kTimeoutMs);
climberRight.config_kP(Constants.kPIDLoopIdx, Constants.kGains_Velocit.kP, Constants.kTimeoutMs);
climberRight.config_kI(Constants.kPIDLoopIdx, Constants.kGains_Velocit.kI, Constants.kTimeoutMs);
climberRight.config_kD(Constants.kPIDLoopIdx, Constants.kGains_Velocit.kD, Constants.kTimeoutMs);
/*
 * Talon FX does not need sensor phase set for its integrated sensor
 * This is because it will always be correct if the selected feedback device is
 * integrated sensor (default value)
 * and the user calls getSelectedSensor* to get the sensor's position/velocity.
 * 
 * https://phoenix-documentation.readthedocs.io/en/latest/ch14_MCSensor.html#
 * sensor-phase
 */
// climberRight.setSensorPhase(true);
climberLeft.setInverted(true);
}
    

    @Override
    public void periodic() {
        // This method will be called once per scheduler run

    }

    @Override
    public void simulationPeriodic() {
        // This method will be called once per scheduler run when in simulation

    }
    public void launcherTune() {
		/* Get gamepad axis */
		double leftYstick = -1 * _joy.getY();

		/* Get Talon/Victor's current output percentage */
		double motorOutput = climberRight.getMotorOutputPercent();

		/* Prepare line to print */
		_sb.append("\tout:");
		/* Cast to int to remove decimal places */
		_sb.append((int) (motorOutput * 100));
		_sb.append("%"); // Percent

		_sb.append("\tspd:");
		_sb.append(climberRight.getSelectedSensorVelocity(Constants.kPIDLoopIdx));
		_sb.append("u"); // Native units

		/**
		 * When button 1 is held, start and run Velocity Closed loop.
		 * Velocity Closed Loop is controlled by joystick position x500 RPM, [-500, 500]
		 * RPM
		 */
		if (_joy.getRawButton(1)) {
			/* Velocity Closed Loop */

			/**
			 * Convert 2000 RPM to units / 100ms.
			 * 2048 Units/Rev * 2000 RPM / 600 100ms/min in either direction:
			 * velocity setpoint is in units/100ms
			 */
			double targetVelocity_UnitsPer100ms = leftYstick * 2000.0 * 2048.0 / 600.0;
			/* 2000 RPM in either direction */
			climberRight.set(TalonFXControlMode.Velocity, targetVelocity_UnitsPer100ms);

			/* Append more signals to print when in speed mode. */
			_sb.append("\terr:");
			_sb.append(climberRight.getClosedLoopError(Constants.kPIDLoopIdx));
			_sb.append("\ttrg:");
			_sb.append(targetVelocity_UnitsPer100ms);
		} else {
			/* Percent Output */

			climberRight.set(TalonFXControlMode.PercentOutput, leftYstick);
		}

		/* Print built string every 10 loops */
		if (++_loops >= 10) {
			_loops = 0;
			System.out.println(_sb.toString());
		}
		/* Reset built string */
		_sb.setLength(0);
	}

    // Put methods for controlling this subsystem
    // here. Call these from Commands.

}

